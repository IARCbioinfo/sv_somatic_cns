manifest {
    homePage = 'https://github.com/adigenova/sv_somatic_cns'
    description = 'Somatic structural variant caller'
    mainScript = 'main.nf'
    author = 'Alex Di Genova'
    version = '1.0'
    name = 'sv_somatic_cns'
}



profiles {
  docker {
	docker.enabled = true
	process.container = 'adigenova/sv_somatic_cns:v1.0'
	}
  singularity {
	singularity.enabled = true
	process.container = 'shub://adigenova/sv_somatic_cns:v1.0'
	pullTimeout = "200 min"
	}
}


//additionals files for visualization of arriba results
params {

//we init additional parameters
help = null
cpu = 4
mem = 16

//options for caller
tn_file = null
bam  = false
input_folder = ""
output_folder = "results"

ext     = ".crai"
ref = null
svaba_dbsnp = "None"
svaba_options = ""
svbaba_targets = null


//manta opts
manta_cfg = "/opt/conda/envs/sv_somatic_cns/share/manta-1.6.0-0/bin/configManta.py"
manta_samtools = "/opt/conda/envs/sv_somatic_cns/bin/samtools"
// SV tools
delly = false
manta = false
svaba = false


}

/*
process {

withLabel:manta_exec {
    cpus = { return Math.max( 4, params.cpus as int ) }
    memory = { return Math.max( 16, params.mem as int ) + "G" }
  }

  withLabel:delly_exec {
      cpus = { return Math.min( 1, params.cpus as int ) }
      memory = { return Math.min( 10, params.mem as int )+ "G" }
  }

  withLabel:svaba_exec {
        cpus = { return Math.min( 1, params.cpus as int ) }
        memory = { return Math.min( 16, params.mem as int ) + "G" }
  }

}
*/


// nextflow run information
timeline {
  enabled = true
  file = "${params.output_folder}/${manifest.name}_timeline.html"
}

report {
  enabled = true
  file = "${params.output_folder}/${manifest.name}_report.html"
}

trace {
  enabled = true
  file = "${params.output_folder}/${manifest.name}_trace.txt"
}

dag {
  enabled = true
  file = "${params.output_folder}/${manifest.name}_dag.html"
}

//Mesage regarding errors or complete
workflow.onComplete = {
    // any workflow property can be used here
    println "Pipeline complete"
    println "Command line: $workflow.commandLine"
}


workflow.onError = {
   println "Oops... Pipeline execution stopped with the following message: ${workflow.errorMessage}"
}
